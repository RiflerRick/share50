var chalk=require('chalk');
exports.renderPage=function(app,fs,res,io,connection,pageName,param)//in js we do not need to give data type of formal parameters in functions
//also know that when we
{
  //one important factor while rendering pages is that you just cannot render pages

  switch(pageName)
  {
    case 'index':
    {
      //This is like the home where all the current or rencent feeds will be shown
      console.log(chalk.blue('param now is:'+param.email));//DEBUG
      console.log(chalk.blue('helper func():index page to be rendered'));//DEBUG
      //var paramObj=JSON.parse(param);
      //this above line is for parsing the JSON that comes inside.
      var userid=param["uid"];
      // console.log("uid in renderPage function is:"+userid);
          res.render('index',{page:pageName,uid:userid});


      break;
    }

    case 'tours':
    {
      console.log(chalk.green("helper func():tours page being rendered"));//DEBUG
      res.render('tours',{page:pageName});
      break;
    }
    case 'parties':
    {
      console.log(chalk.green("helper func():parties page being rendered"));//DEBUG
      res.render('parties',{page:pageName});
      break;
    }
    case 'profile':
    {
      console.log(chalk.green('helper func():profile page to be rendered'));//DEBUG
      // console.log("param, email:"+param.email);
      var name=param.name;
      var email=param.email;
      var dob=param.dob;
      var tourNum=param.tourNum;
      var partyNum=param.partyNum;
      var friends=param.friends;
      var profileSrc=param.profileSrc;
      var userid=param.userid;
      res.render('profile',{userid:userid,page:pageName,name:name,email:email,dob:dob,tours:tourNum,parties:partyNum,friends:friends,profileSrc:profileSrc});
      // res.render('index',{page:pageName,content:0});
      break;
    }

  }
};
exports.toursCheck=function(res,userid,connection,date){
  // console.log("enetered toursCheck");
  connection.query("SELECT * FROM tours WHERE uid=? AND dateOfJourney=?",[userid,date],function(err,results,objects){
    if(err)
    {
      console.log("error occured:"+err.stack);
    }
    else {
      var tours=Object.keys(results).length;
      // console.log("tours now:"+tours);
      res.send(JSON.stringify({tours:tours}));
    }

  });
};

exports.partyCheck=function(res,userid,connection,date){
  connection.query("SELECT * FROM party WHERE uid=? AND start=?",[userid,date],function(err,results,objects){
    if(err)
    {
      console.log("error occured in partyCheck"+err.stack);
    }
    else {
      var parties=Object.keys(results).length;
      // console.log("parties now:"+parties);
      res.send(JSON.stringify({parties:parties}));

    }
    });

};

exports.respondNames=function(chalk,connection,res,data)
{
  console.log(chalk.blue("helper function:inside respondNames function"));

  var i=0;
  var len=Object.keys(data).length;
  var resData={};
  var name,email;
  for(var key in data)
  {
    connection.query("SELECT * FROM users WHERE uid=?",[data[key]],function(err,results,fields){
      name="name"+i.toString();
      email="email"+i.toString();
      resData[name]=results[0].name;
      resData[email]=results[0].email;
      if(i==len-1)
      {
          res.send(JSON.stringify(resData));
      }
    });
  }


};
