/*
This is the controller that actually has the entry point code of project.In any express application, there are basically three main files in the
directory, the first one is called the app.js which contains the code for the entry point(routing and so on) of the application and project, the node
modules sub dir which contains the modules for express and any other modules that we have installed using npm for instance and package.json
package.json is a file that contains the dependencies. When you install express using npm package.json is not created. We need to create package.json
file (see documentation of node for that) automatically or manually. After this if we delete node modules dir, we can simply install express by command
'node install' and using the package.json file it is gonna install express and create node modules directory for us again.

The package.json file can be created using the command 'npm init' in our node command line.
*/
var express=require('express');//includes express module.
var fs=require('fs');
var path=require('path');//includes path modules
var helper=require('helper.js');//custom directory for a few helper functions.
var chalk=require('chalk');
var mime=require('mime');//for file uploads
// var session=require('express-session');//this is actually for the session storage for the user.
var session=require('express-session');//this is using the mozilla library or module called express-sessions.
var mysql=require('mysql');
var escape=require('html-escape');//this is just for escaping special characters.
var passHash=require('password-hash');//this module will be required for hashing the password into the table.
var bodyParser=require('body-parser');//for handling post requests we need to use body parser.
var multer  = require('multer');//for uploading files(images and videos)
var app=express();//making an instance of express module and we can call various functions from within express using app.<function name>
var server=app.listen(1337,function(){
  console.log("listening at port 1337");
});//listening at port 1337

var io=require('socket.io').listen(server);//this is essentially gonna be the socket.io library that we are gonna use for real time form feed
//listen to the same server for the web socket connection

var connection=mysql.createConnection({
  host:'localhost',
  user:'riflerRick',
  password:'share50_123',
  database:'share50'
});

connection.connect(function(err){
  if(err)
  {
    console.error('error connecting to the database: '+err.stack);
    //this will also show the error.
  }

  else {
      console.log("connection established successfully");
  }
});
/*
This is the database integration part of the application.
host is by default localhost, username and password must match with those running on the server and database must be defined.
port number for mysql server is set by default 3306 which is also the default port number set by this library.
*/

app.set('view engine','ejs');//this is for a plugin support for express.there are various technologies that we can plugin into our application
/*
A template engine enables you to use static template files in your application. At runtime, the template engine replaces variables in a
template file with actual values,and transforms the template into an HTML file sent to the client.
This approach makes it easier to design an HTML page.

The use of this is similar to the concept of rendering views.
we can do app.set('view engine','pug');//pug is a template engine for express.
we can now write our render function in the following way:
app.get('/',function(req,res){res.render('index',{title:'Hey',message:'Hello there!!!'})});

Now inside the index.pug file we can simply use title and message as variables and it will be replaced with their corresponding values rendered
with the render function in the controller.
*/

//our code here is setting the view engine or template engine to 'ejs'


app.use(express.static(path.join(__dirname,'public')));//middleware


//app.use(app.Router);//here this simply means that we are using routes.
//app.use(cookieParser());

/*
Middleware is just code that you inject into the request-response lifecyle of our application.
It just means that you are telling the server to do something in between when the request is sent by the client and the reponse is
generated by the server.
*/

/*
In our code this tells us that if we have a static request that comes in then go ahead and assume it lives in the public directory.
Here static content simply means images, css, js that are directly being used by the views or web pages.
*/

//another middleware. This time its about sessions...
app.use(session({
  cookieName:'session',
  secret:'myShare50WorldBeatsOnThisLineDoNotTamper',
  duration:30*60*1000,
  activeDuration:5*60*1000
}));




//this is the middleware that sets up cookies for the user(client side).
/*
genid it is a new generated session id
cookieName is the name given to every cookie.
secret is a string that is used to encrypt the cookie. meanwhile the library internally will encrypt and decrypt the secret so that the
cookie remains safe in the user's browser.
the duration is the time(in ms) that the cookie will remain active
activeDuration is the time(in ms) that the cookie will remain active after the the user has clicked has reloaded the page.
*/

app.use(bodyParser());
/*
This is the middleware that will be required for the purpose of form handling and post request handling.
*/
var param={};
function startSession(req,email,uid)
{
  req.session.email=email;
  console.log("email of session object is:"+email);
  req.session.uid=uid;
  // var param={};
  param["email"]=email;
  param["uid"]=uid;
  return param;
}

function setParam(email,userId)
{
  // var param={};
  param["email"]=email;
  param["uid"]=userId;
  return param;
}


app.get('/',function(req,res){
  /*console.log('Cookies:',req.cookies);
  now this is important here because if we get a session that had been set already then we must redirect the user to the index page
  and not the landing page.
  If however the session data does not exist we can redirect the user to the landing page.
  */
  var userId;
  if(req.session&&req.session.email)//this simply checks if the session exists...
  {
    console.log(chalk.blue("/ GET:session found"));//DEBUG

    //so we need to pass both the email and the id to index the user
    connection.query("SELECT * FROM users WHERE email=?",[req.session.email],function(err, results,fields){
      userId=results[0].uid;
      param=setParam(req.session.email,userId);
      helper.renderPage(app,fs,res,io,connection,'index',param);
      console.log(chalk.blue("/ GET:index page rendered..."));
    });

  }
  else
  {
    console.log(chalk.blue("/ GET:no session found"));//DEBUG
    console.log(chalk.blue("/ GET:landing page being rendered"));
    res.render('landing');
  }
});

app.get('/emailCheck',function(req,res){
  //this function is for ajax checking whether the email that was entered by the user actually exists
  var jsonRes;
  console.log(chalk.blue("/emailCheck GET:ajax emailCheck request made."));//DEBUG
  var email=req.query.email;

      connection.query('SELECT * FROM users WHERE email=?',[email],function(err,results,fields){
        if(Object.keys(results).length>0){
          //turns out that results is an object that has key value pairs here.

          res.send(JSON.stringify({emailFound:1}));//send a json response
          console.log(chalk.green("/emailCheck GET:email found"));//DEBUG
        }
          else {

            console.log(chalk.green("/emailCheck GET:no emails found"));//DEBUG
            res.send(JSON.stringify({emailFound:0}));//send a json response

          }

      });

});


app.get("/indexRequest",function(req,res){
  console.log(chalk.green("/wellContentRequest GET:ajax request received "));
  if(req.session.email&&req.session)
  {
    connection.query("SELECT * FROM users WHERE email=?",[req.session.email],function(err,results,fields){
      var uid=results[0].uid;
      connection.query("SELECT * FROM friends WHERE (uid=? OR fuid=?) AND isAccepted=?",[uid,uid,1],function(err,results,fields){
        var hasFriends=Object.keys(results).length;
        // console.log("hasFriends:"+hasFriends);
        res.json({hasFriends:hasFriends});
      });
    });
    console.log(chalk.green('/wellContentRequest GET:response sent'));//this is just sending the uid but i can potentially send many more
    //things like whole data based on what the friends of the person are and what photos and videos the friends have shared
  }
  else {

    console.log(chalk.red('/wellContentRequest GET:no session found'));
    res.render('landing');
  }

});

app.get("/searchFriends",function(req,res){//ajax for searching friends
  var friend=req.query.friend;
  var userid=req.query.uid;
  console.log("/searchFriends GET:friend:"+friend);
  friend="%"+friend+"%";
  connection.query("SELECT * FROM users WHERE name LIKE ? AND email NOT IN (?)",[friend,req.session.email],function(err,results,fields){
    if(err)
    {
      console.log("/searchFriends GET:error searching from database:"+err.stack);
    }
    else {

      var num=Object.keys(results).length;
      if(num>0){
        var val,uid;
        var i=0;
        param={};
        param["num"]=num;
        while(i<num)
        {

          val="val"+i.toString();
          param[val]=results[i].name;
          uid="uid"+i.toString();
          param[uid]=results[i].uid;

          i++;

        }
        //param now contains the list of the name and uids of the users having similar names (except the user logged in)
        // helper.checkFriendList(chalk,res,param,userid,connection);
        res.send(JSON.stringify(param));
      }
      else {
        param["num"]=0;
        res.send(JSON.stringify(param));
      }

    }

  });
});

app.post("/friendRequest",function(req,res){

  var uid=req.body.friendList;
  console.log(chalk.blue("/friendRequest GET:req.query.friendList returned:"+uid));
  var userid;
  connection.query("SELECT * FROM users WHERE email=?",[req.session.email],function(err,results,fields){
    userid=results[0].uid;
    var date=getDateToday();

    connection.query("SELECT * FROM friends WHERE ((fuid=? AND uid=?) OR (uid=? AND fuid=?)) AND isAccepted=?",[uid,userid,uid,userid,1],function(errNew, resultsNew,fieldsNew){
      if(Object.keys(results).length>0){
      connection.query("SELECT * FROM users WHERE uid=?",[uid],function(e,r,f){//here uid is the friend's uid.
          var name=r[0].name;
          var pageName="Hey check out!!!";
          console.log("error, seems you are trying to insert into database again...");
          res.render('friendRequestPageError',{page:pageName,friend:name});
      });}


    });

      connection.query("INSERT INTO friends (uid,fuid,isAccepted,timeOfCreation) VALUES (?,?,?,?)",[userid,uid,0,date],function(err,results,fields){
        if(err)//the most probability of this error is only when you are trying to make a friend request that already exists
        {
          console.log(chalk.red("/friendRequest GET:could not insert into database"+err.stack));
          param=setParam(req.session.email,userid);
          // helper.renderPage(app,fs,res,io,connection,'index',param);
          // console.log("uid now:"+uid);


        }
        else {
          console.log(chalk.green("/friendRequest GET:successfully inserted into database"));
          param=setParam(req.session.email,userid);
          // helper.renderPage(app,fs,res,io,connection,'index',param);
          var pageName="friend Request Sent";
          res.render("friendRequestSent",{page:pageName});
        }
      });
  });

});

app.get("/checkFriendReq",function(req,res){
  connection.query("SELECT * FROM users WHERE email=?",[req.session.email],function(err,results,fields){
    var userid=results[0].uid;
    console.log("/checkFriendReq GET: user id of the user logged in is:"+userid);
    connection.query("SELECT * FROM friends WHERE fuid=? AND isAccepted=?",[userid,0],function(err,results,fields){
      if(err)
      {
        console.log(chalk.red("/checkFriendReq GET:error in selecting from db"+err.stack));
        param=setParam(req.session.email,userid);
        helper.renderPage(app,fs,res,io,connection,'index',param);
      }
      else {
        console.log(chalk.green("/checkFriendReq GET:successfully retrieved from db"));
        var requests=Object.keys(results).length;
        res.send(JSON.stringify({hasRequests:requests}));
      }
    });
  });
});

app.get("/friendRequestPage",function(req,res){
  var pageName="friendRequestPage";
  var uid=req.query.uid;
  res.render("friendRequestPage",{page:pageName,uid:uid});
});

app.get("/showFriendRequests",function(req,res){
  console.log(chalk.blue("/showFriendRequests GET:ajax request received"));
  var uid;
  // connection.query("SELECT * FROM users WHERE email=?",[req.session.email],function(err,results,fields){
    connection.query("SELECT users.name,users.email FROM friends INNER JOIN users ON friends.uid=users.uid WHERE friends.fuid=? AND friends.isAccepted=?",[req.query.uid,0],function(err,results,fields){
      var i=0;
      var data={};
      var uid,name,email;
      console.log("results:"+Object.keys(results).length);
      if(Object.keys(results).length==0)
      {
        console.log(chalk.green("/showFriendRequests GET: no friend reqs pending"));
        // param=setParam(req.session.email,req.query.uid);
        res.send(JSON.stringify({name0:null}));
        // helper.renderPage(app,fs,res,io,connection,'index',param);//this is the uid of the user logged in
      }
      else {
        while(i<Object.keys(results).length)
        {
          uid="uid"+i.toString();
          name="name"+i.toString();
          email="email"+i.toString();
          // data[uid]=results[i].uid;
          data[name]=results[i].name;
          data[email]=results[i].email;
          i++;
        }
        res.send(JSON.stringify(data));
        // helper.respondNames(chalk,connection,res,data);//only for grabbing the names and emails before sending a json response to the client
      }

    });

});


app.get("/acceptFriendRequest",function(req,res){
  console.log(chalk.blue("acceptFriendRequest GET:request sent to accept friend by email:"+req.query.email));
  connection.query("SELECT * FROM users WHERE email=?",[req.query.email],function(err,results,fields){
    var uid=results[0].uid;
    connection.query("UPDATE friends SET isAccepted=? WHERE uid=? AND fuid=?",[1,uid,req.query.uid],function(err,results,fields){
      if(err)//here req.query.uid is the uid of the user logged in currently
      {
        console.log(chalk.red("could not update the database"));
      }
      else {
        console.log(chalk.green("updated the database successfully"));
        var pageName="friendRequestPage";
        uid=req.query.uid;
        res.render("friendRequestPage",{page:pageName,uid:uid});
      }

    });

  });
})




app.post('/signIn',function(req,res){
  //now if the user signs in successfully then we need to check from the database whether the user exists or not...
  console.log(chalk.blue("/signIn POST:sign in request made"));//DEBUG
  var userId;
  if(req.session && req.session.email)
  {
    console.log(chalk.blue("/signIn POST:session exists"));//DEBUG
    connection.query("SELECT * FROM users WHERE email=?",[req.session.email],function(err, results,fields){
      userId=results[0].uid;
      // console.log("/signIn GET:user id returned is"+userId);
      param=setParam(req.session.email,userId);
      helper.renderPage(app,fs,res,io,connection,'index',param)
    });
    ;
  }
  else {
    console.log(chalk.blue("/signIn POST:session does not exist"));//DEBUG
    email=escape(req.body.email);
    // console.log(chalk.blue("/signIn POST:email received:"+email));
    password=escape(req.body.password);
    // console.log(chalk.blue("/signIn POST:password received:"+password));
    connection.query("SELECT * FROM users WHERE email=?",[email],function(err,results,fields){
      if(err)
      {
        console.log(chalk.red("/signIn POST:could not run query:"+err.stack));//DEBUG
      }
      else {
        console.log(chalk.green("/signIn POST:query successful"));//DEBUG
        if(passHash.verify(password,results[0].password))
        {
          //start a session and render index page
          console.log(chalk.green("/signIn POST:login successful, session started"));//DEBUG
          param=startSession(req,email,results[0].uid);//custom function
          helper.renderPage(app,fs,res,io,connection,'index',param);
        }
        else {
          console.log(chalk.red("/signIn POST:login unsuccessful, rendered loginError page"));//DEBUG

          res.render('loginError',{email:email});//render a page called log in error
        }
      }
    });
  }


});

app.post("/signInError",function(req,res){
  var email=escape(req.query.email);
  var password=escape(req.body.password);
  connection.query("SELECT * FROM users WHERE email=?",[email],function(err,results,fields){
    if(err)
    {
      console.log(chalk.red("/signIn POST:could not run query:"+err.stack));//DEBUG
    }
    else {
      console.log(chalk.green("/signIn POST:query successful"));//DEBUG
      if(passHash.verify(password,results[0].password))
      {
        //start a session and render index page
        console.log(chalk.green("/signIn POST:login successful, session started"));//DEBUG
        param=startSession(req,email,results[0].uid);//custom function
        helper.renderPage(app,fs,res,io,connection,'index',param);
      }
      else {
        console.log(chalk.red("/signIn POST:login unsuccessful, rendered loginError page"));//DEBUG

        res.render('loginError',{email:email});//render a page called log in error
      }
    }
  });

});


app.post('/signUp',function(req,res){

  console.log("/signUp POST:sign up request made");
  var userId;
  if(req.session&&req.session.email)//if session exits.
  {
    console.log(chalk.red("/signUp POST:session found"));//DEBUG
    connection.query("SELECT * FROM users WHERE email=?",[req.session.email],function(err, results,fields){
      userId=results[0].uid;
      param=setParam(req.session.email,userId);
      helper.renderPage(app,fs,res,io,connection,'index',param);
      console.log(chalk.red("/signUp POST:index page rendered"));//DEBUG
    });

  }
  else {
    //error checking
    console.log(chalk.green("/signUp POST:signUp post request made"));//DEBUG


  //if the user signs up, we need to make sure that he has registered...
  //connection to the database will be made here and we will register the user...

        // console.log("connection established successfully");
        var firstName=escape(req.body.firstName);
        var lastName=escape(req.body.lastName);
        var name=firstName+" "+lastName;
        var email=escape(req.body.email);

        var date=req.body.date;
        // console.log('date:'+date);
        var month=req.body.month;
        // console.log('month:'+month);
        var year=req.body.year;

        var dob=year.toString()+"-"+month.toString()+"-"+date.toString();
        //from reading the documentation of mysql i know that date accpets yyyy-mm-dd as a string
        var gender=req.body.gender;
        var password;
        var rawPass=req.body.checkPass;
        // console.log("email is: "+email);
        // console.log("dob: "+dob);
        // console.log("password given by user: "+rawPass);
        password=passHash.generate(rawPass);
        connection.query('INSERT INTO users (name,email,dob,gender,password) VALUES (?,?,?,?,?)',[name,email,dob,gender,password],function(err,results,fields){
          var id;
          connection.query('SELECT * FROM users WHERE email=?',[email],function(errNew,resultsNew,fieldsNew){
            id=resultsNew[0].uid;//getting the id of the user and setting the user accordingly...
            console.log(chalk.blue("/signUp POST:user id retrieved from db:"+id));//DEBUG

          //results will contain the results of the query.
          //fields will contain the information about the returned results.
          if(errNew)
          {
            console.log(chalk.red("/signUp POST:error encountered",err.stack));//DEBUG
          }
          else {

              console.log(chalk.green("/signUp POST:successfully inserted into database"));//DEBUG
              //after we get the details inside the database we need to start a session and redirect the user to the index.ejs view.

              console.log(chalk.green("/signUp POST:successfully added sessions and started it."));//DEBUG
              console.log("id now is:"+id);
              param=startSession(req,email,id);
              helper.renderPage(app,fs,res,io,connection,'index',param);//this function defined in helper.js actually will be used for rendering the index page
              //of the user with the account email.
              // res.render('index');

          }
          });
        });
        //for info on queries follow:https://github.com/mysqljs/mysql#performing-queries*/

      }
});



var storage=multer.diskStorage({destination:function(req,file,cb){
  //cb is callback
  cb(null,'public/images/acc/');
},filename:function(req,file,cb){
  // console.log("inisde diskStorage callback, file obtained is :"+file.originalname);
  //  var date=new Date();
  connection.query("SELECT * FROM users WHERE email=?",[req.session.email],function(err,results,fields){
    if(err)
    {
      console.log("error in file storage");
    }
    else {
      var userid=results[0].uid;
    cb(null,file.fieldname+userid+"."+mime.extension(file.mimetype));
    }

  });



}});
var upload = multer({ storage:storage });


app.get('/profile',function(req,res){
  if(req.session.email&&req.session)
  {
    param={};
    // var name;
      console.log(chalk.green("/profile GET:session found"));
      var userId;
      connection.query("SELECT * FROM users WHERE email=?",[req.session.email],function(err,results,fields){
        // console.log("inside profile name is:"+results[0].name);
        param["name"]=results[0].name;
        // console.log("inside profile now object is:"+param.name);
        param["email"]=results[0].email;
        param["dob"]=results[0].dob;
        if(results[0].profilePicPath==null)
        {
          param["profileSrc"]="images/acc/emoticonNoFace.png";
        }
        else {
          var path="images/acc/"+results[0].profilePicPath;
          // path=path.substring(7);//we are omiting public/ from our path
          var mime=results[0].profilePicMime;
          /*switch(mime)
          {
            case "image/jpeg":
            {
              path=path+".jpg";
              break;
            }
            case "image/bmp":
            {
              path=path+".bmp";
              break;
            }
            case "image/x-windows-bmp":
            {
              path=path+".bmp";
              break;
            }
            case "image/png":
            {
              path+=".png";
              break;
            }
          }*/
          param["profileSrc"]=path;
        }
        userId=results[0].uid;
        param["userid"]=userId;

      connection.query("SELECT * FROM tours WHERE uid=?",[userId],function(err,results,fields){
        if(Object.keys(results).length>0)
        {
          param["tourNum"]=Object.keys(results).length;
        }

        else {
          //console.log(chalk.blue("tour number is 0"));
          param["tourNum"]=0;
        }
      });
      connection.query("SELECT * FROM party WHERE uid=?",[userId],function(err,results,fields){
        if(Object.keys(results).length>0)
        {
          param["partyNum"]=Object.keys(results).length;
        }
        else {
          param["partyNum"]=0;
        }
      });
      connection.query("SELECT * FROM friends WHERE (uid=? OR fuid=?) AND isAccepted=?",[userId,userId,1],function(err,results,fields){
        if(Object.keys(results).length>0)
        {
          console.log("friends is not zero")
          param["friends"]=Object.keys(results).length;
        }
        else {
          param["friends"]=0;
        }
        helper.renderPage(app,fs,res,io,connection,'profile',param);
      });
      // helper.renderPage(app,fs,res,io,connection,'profile',param);
      });
  }
  else {
    console.log(chalk.red("/profile GET:session not found"));
    res.render('landing');
  }

});

app.post("/profilePicUpload",upload.single('pic'),function(req,res){//upload.single(<fieldname>) fieldname is the name of the field from wehere we are trying to upload the file(form field name)
  var pic=req.file;//this is an object that contains attributes like path that we can use for storing in the database
  // console.log("")
  // console.log("mime type currently is:"+pic.mimetype);
  //we can use a modeule mmmagic of express that can check mime types of files, make sure to see this from github
  if(pic==undefined)
  {
    var pageName="Hey check out";
    res.render("fileNotChosen",{page:pageName});
    return;
  }

  connection.query("UPDATE users SET profilePicPath=?,profilePicMime=? WHERE email=?",[pic.filename,pic.mimetype,req.session.email],function(err,results,fields){
    if(err)
    {
      console.log(chalk.red("error inserting into database:"+err.stack));
    }
    else {
      console.log(chalk.green("successfully inserted into database"));
      connection.query("SELECT * FROM users WHERE email=?",[req.session.email],function(errNew,resultsNew,fieldsNew){
        var userid=resultsNew[0].uid;
        param=setParam(req.session.email,userid);
        helper.renderPage(app,fs,res,io,connection,'index',param);
      });

    }
  });
});

app.get("/tours",function(req,res){

  helper.renderPage(app,fs,res,io,connection,'tours',param);

});



app.get("/parties",function(req,res){

  helper.renderPage(app,fs,res,io,connection,'parties',param);

});


function getDateToday(){//sync function
  var dateToday=new Date();//there is a class named Date in js that has getter functions to get the day, month and year
  var day=dateToday.getDate();
  var month=dateToday.getMonth()+1;//since jan is 0
  var year=dateToday.getFullYear();
  if(day<10) {
    day='0'+day;
}

if(month<10) {
    month='0'+month;
}
return year+"-"+month+"-"+day;
}


app.get("/dateSent",function(req,res){
  //this is actually gonna check from the database if the user has any party or tour scheduled
  console.log(chalk.blue("/dateSent GET: ajax request recieved"));
  var day=req.query.day;
  var month=req.query.month;
  var year=req.query.year;
  var userid;
  var date=year+"-"+month+"-"+day;
  // console.log("date is:"+date);
  var page=req.query.reqPage;
  // console.log("page is:"+page);
  connection.query("SELECT * FROM users WHERE email=?",[req.session.email],function(err,results,fields){
    if(err)
    console.log("error in selection itself");

    userid=results[0].uid;
    if(page=="tours")
    helper.toursCheck(res,userid,connection,date);
    else {
      helper.partyCheck(res,userid,connection,date);
    }

  });


});



app.get('/friendList',function(req,res){
  //so according to the email of of the session that will be existing in the server the friendlist of the person will be prepared and sent
  connection.query("SELECT * FROM users WHERE email=?",[req.session.email],function(err,results,fields){
    var id=results[0].uid;
    connection.query("SELECT users.uid,users.email,users.name FROM friends INNER JOIN users ON (friends.uid=users.uid OR friends.fuid=users.uid) WHERE (friends.uid=? OR friends.fuid=?) AND friends.isAccepted=1",[id,id],function(err,results,fields){
      var friendList={};
      var i,name,email,uid,id;
      friendList["elements"]=Object.keys(results).length;
      for(i=0;i<Object.keys(results).length;i++)
      {

        if(results[i].email.localeCompare(req.session.email)!=0)
        {
          name="name"+i;
          email="email"+i;
          id="id"+i;
          friendList[name]=results[i].name;
          friendList[id]=results[i].uid;
          friendList[email]=results[i].email;

        }
      }
      //here we have the array called friendList, lets store that data in the session object
      //here we only send the ids of the friends
      // helper.sendFriendList(chalk,connection,res,friendList);

      req.session.friendList=friendList;
      res.send(JSON.stringify(friendList));
    });
  });
});


app.post('/partiesCreate',function(req,res){
  //partiesCreate is a get request originated from tours.ejs page.
  //so the following are the informations that we receive: destination, leaving, return, description and a bunch of emails.
  var destination=req.body.destination;
  var leavingDate=req.body.leaving;
  var returnDate=req.body.return;
  var description=req.body.description;
  //first lets check how many friends does the guy have
  connection.query("SELECT * FROM users WHERE email=?",[req.session.email],function(err,results,fields){
    var uid=results[0].uid;
    var randomVal=Math.random();
    connection.query("INSERT INTO party(uid,Description,start,end,destination,popularity,randomVal,isOver) VALUES (?,?,?,?,?,0,?,0) ",[uid,description,leavingDate,returnDate,destination,randomVal],function(err,results,fields){
      if(err)
      {
        console.log(chalk.red("could not enter into the database:"+err.stack));
      }
      else
      console.log(chalk.green("successfully entered into the database:"));
    });
    connection.query("SELECT * FROM party WHERE uid=? AND randomVal=?",[uid,randomVal],function(err,results,fields){
      var pid=results[0].pid;
      /*if(req.session.friendList==null)//error checking
      console.log("req.session.friendList is null");
      else {
        console.log("req.session.friendList is not null, voila");
      }*/
      var friendList=req.session.friendList;
      var checkBoxName;
      for(var key in friendList)
      {
        if(key.substring(0,2).localeCompare("id")==0)
        {
          console.log(chalk.blue("friendList value is:"+friendList[key]));
          checkBoxName=friendList[key];
          var value=req.body[checkBoxName];
          if(value==null)
          {
            console.log(chalk.blue("friendList[key]:"+friendList[key]+"has a value of undefined"));
            //do not add as a visitor
          }
          else {
            //add as a visitor
            console.log(chalk.blue("friendList[key]:"+friendList[key]+"has a defined value"));
            connection.query("INSERT INTO visitor(pid,uid,visitorId,isAccepted) VALUES (?,?,?,0)",[pid,uid,checkBoxName],function(err,results,fields){
              if(err)
              {
                console.log(chalk.red("error inserting into the database:"+err.stack));
              }
              else{console.log(chalk.green("successfully inserted into visitor table"));}
            });
          }
        }
      }
    });
    });

    var pageName="PartyCreated";
    res.render('partyCreated',{page:pageName});

  });
app.post('/toursCreate',function(req,res){

  var destination=req.body.destination;
  console.log(chalk.blue("destination accepted:"+destination));
  var leavingDate=req.body.leaving;
console.log(chalk.blue("leaving date accepted:"+leavingDate));
  var returnDate=req.body.return;
  console.log(chalk.blue("returnDate  accepted:"+returnDate));
  var description=req.body.description;
  console.log(chalk.blue("description accepted:"+description));
  //first lets check how many friends does the guy have
  connection.query("SELECT * FROM users WHERE email=?",[req.session.email],function(err,results,fields){
    var uid=results[0].uid;
    var randomVal=Math.random();
    connection.query("INSERT INTO tours(uid,Description,dateOfJourney,dateOfReturn,destination,popularity,randomVal,isOver) VALUES (?,?,?,?,?,0,?,0) ",[uid,description,leavingDate,returnDate,destination,randomVal],function(err,results,fields){
      if(err)
      {
        console.log(chalk.red("could not enter into the database:"+err.stack));
      }
      else
      console.log(chalk.green("successfully entered into the database:"));
});
    connection.query("SELECT * FROM tours WHERE uid=? AND randomVal=?",[uid,randomVal],function(err,results,fields){
      //error point possible...
      var tid=results[0].tid;

      var friendList=req.session.friendList;
      var checkBoxName;
      for(var key in friendList)
      {
        // console.log(chalk.blue(""));
        if(key.substring(0,2).localeCompare("id")==0)
        {
          console.log(chalk.blue("friendList value is:"+friendList[key]));
          checkBoxName=friendList[key];
          var value=req.body[checkBoxName];
          // console.log("value of value is:"+value+"checkBoxName"+checkBoxName);
          if(value==null)
          {
            console.log(chalk.blue("friendList[key]:"+friendList[key]+"has a value of underfined"));
            //do not add as a visitor
            //seems like when the value is 1 it means it is not selected whereas when the value is 0 it is selected.
          }
          else {
            //add as a visitor
            console.log(chalk.blue("friendList[key]:"+friendList[key]+"has a defined value"));
            connection.query("INSERT INTO companion(tid,uid,comId,isAccepted) VALUES (?,?,?,0)",[tid,uid,checkBoxName],function(err,results,fields){
          });
          }
        }
      }
      });
    });
    var pageName="tourCreated";
    res.render('tourCreated',{page:pageName});
});

app.get('/myTours',function(req,res){
  /*
  my tours page is basically there for the purpose of showing all the tours that the person has undertaken just that, from there
  in case the person wants to check those tours, he has to actually go there.
  */
  var pageName="My Tours";
  res.render('myTours',{page:pageName});
});

app.get('/myParties',function(req,res){
  /*
  my parties is basically there for the purpose of showing all the parties.
  */
  var pageName="My Parties";
  res.render('myParties',{page:pageName});
});

app.get('/checkMyTours',function(req,res){
  var uid=req.session.uid;
  console.log("/checkMyTours: uid returned from session object:"+uid);
  //first we need to tell the user if there are any tours to which he is invited
  var response={};
  connection.query("SELECT users.uid,users.name,users.email,companion.tid FROM companion INNER JOIN users WHERE (comId=? AND isAccepted=0 AND companion.uid=users.uid)",[uid],function(err,results,fields){
    if(err)
    console.log(chalk.red("error in database con:"+err.stack));
    var num=Object.keys(results).length;
    var id,i,name,email,tid;
    i=0;
    if(num>0)
    {
      response["invites"]=num;
      while(num>0)
      {

        id="uid"+i;
        tid="tid"+i;
        name="name"+i;
        email="email"+i;

        response[id]=results[i].uid;
        response[tid]=results[i].tid;
        response[name]=results[i].name;
        response[email]=results[i].email;

        i++;
        num--;
      }
    }
    else {
      response["invites"]=0;
    }
    // helper.printJSON(response);

  // helper.printJSON(response);
  //first part of response created.

  connection.query("SELECT * FROM tours WHERE uid=?",[uid],function(err,results,fields){
    var num=Object.keys(results).length;
    console.log("number of tours returned"+num);
    response["ownTours"]=num;//tells us the number of tours conducted.
    var destination,dateOfJourney,dateOfReturn,description;
    var i=0;


    while(i<num)
    {

      destination="dest"+i;
      dateOfJourney="dateOfJourney"+i;
      dateOfReturn="dateOfReturn"+i;
      description="description"+i;
      response[destination]=results[i].destination;
      response[dateOfJourney]=results[i].dateOfJourney;
      response[dateOfReturn]=results[i].dateOfReturn;
      response[description]=results[i].Description;
      i++;

    }
    connection.query("SELECT * FROM tours INNER JOIN companion WHERE (companion.comId=? AND companion.tid=tours.tid AND companion.isAccepted=1)",[uid],function(errNew,resultsNew,fieldsNew){
      if(Object.keys(resultsNew).length>0){

        num=num+Object.keys(resultsNew).length;
        response["ownTours"]=num;
        var j=0;
        while(i<num)
        {

          destination="dest"+i;
          dateOfJourney="dateOfJourney"+i;
          dateOfReturn="dateOfReturn"+i;
          description="description"+i;
          response[destination]=resultsNew[j].destination;
          response[dateOfJourney]=resultsNew[j].dateOfJourney;
          response[dateOfReturn]=resultsNew[j].dateOfReturn;
          response[description]=resultsNew[j].Description;
          i++;j++;

        }

      // helper.printJSON(response);//user defined function.

      }
      res.send(JSON.stringify(response));
    });
  });
  });

});

app.get('/checkMyParties',function(req,res){
  var uid=req.session.uid;
  var response={};

  connection.query("SELECT users.uid,users.name,users.email,visitor.pid FROM visitor INNER JOIN users WHERE (visitorId=? AND isAccepted=0 AND visitor.uid=users.uid)",[uid],function(err,results,fields){
    var num=Object.keys(results).length;
    var id,i,name,email,pid;
    i=0;
    if(num>0)
    {
      response["invites"]=num;
      while(num>0)
      {
        id="uid"+i;
        pid="pid"+i;
        name="name"+i;
        email="email"+i;
        response[id]=results[i].uid;
        response[pid]=results[i].pid;
        response[name]=results[i].name;
        response[email]=results[i].email;

        i++;
        num--;
      }
    }
    else {
      response["invites"]=0;
    }



  connection.query("SELECT * FROM party WHERE uid=?",[uid],function(err,results,fields){
    var num=Object.keys(results).length;
    response["ownParties"]=num;//tells us the number of tours conducted.
    var destination,dateOfJourney,dateOfReturn,description;
    var i=0;
    while(i<num)
    {
      destination="dest"+i;
      dateOfJourney="dateOfJourney"+i;
      dateOfReturn="dateOfReturn"+i;
      description="description"+i;
      response[destination]=results[i].destination;
      response[dateOfJourney]=results[i].start;
      response[dateOfReturn]=results[i].end;
      response[description]=results[i].Description;
      i++;
    }
    connection.query("SELECT * FROM party INNER JOIN visitor WHERE (visitor.visitorId=? AND visitor.pid=party.pid AND visitor.isAccepted=1)",[uid],function(errNew,resultsNew,fieldsNew){
      if(Object.keys(resultsNew).length>0)
      {
        num=num+Object.keys(resultsNew).length;
        response["ownParties"]=num;
        var j=0;
        while(i<num)
        {
          destination="dest"+i;
          dateOfJourney="dateOfJourney"+i;
          dateOfReturn="dateOfReturn"+i;
          description="description"+i;
          response[destination]=resultsNew[j].destination;
          response[dateOfJourney]=resultsNew[j].start;
          response[dateOfReturn]=resultsNew[j].end;
          response[description]=resultsNew[j].Description;
          i++;j++;
        }

      }
      res.send(JSON.stringify(response));
    });
  });

  });
});

app.get('/acceptTourRequest',function(req,res){
//this is gonna render a page called acceptTourRequest
console.log(chalk.blue("acceptTourRequest get: inside function"));
//it may be possible that the corresponding tour has expired and hence there is no point of keeping that request, in which
//case the user will be alerted of the same.
var requestUid=req.query.uid;//this is the uid of the guy who has sent the request.
var uid=req.session.uid;
var tid=req.query.tid;
// "SELECT tours.tid,tours.Description,tours.dateOfJourney,tours.dateOfReturn,tours.destination,tours.isOver FROM companion INNER JOIN tours WHERE (companion.uid=? AND companion.comId=? AND companion.tid=? AND companion.tid=tours.tid)"
connection.query("SELECT * FROM  tours WHERE tid=?",[tid],function(err,results,fields){
  var today=new Date();
  var tid=results[0].tid;
  var destination=results[0].destination;
  uid=requestUid;
  var comId=req.session.uid;
  var dateOfJourney=(results[0].dateOfJourney);
  var dateOfReturn=(results[0].dateOfReturn);
  dateOfJourney=dateOfJourney.toString();
  dateOfReturn=dateOfReturn.toString();
  dateOfJourney=dateOfJourney.substring(0,10);
  dateOfReturn=dateOfReturn.substring(0,10);
  var description=results[0].Description;
  var pageName="accept tour request";
if(results[0].isOver==1)
{
  //day has passed

  var displayOver="block;";
  var displayTour="none;";
}
else {
  var displayOver="none;";
  var displayTour="block;";
}
res.render("acceptTourRequest",{page:pageName,displayOver:displayOver,displayTour:displayTour,destination:destination,description:description,dateOfJourney:dateOfJourney,dateOfReturn:dateOfReturn,uid:uid,comId:comId,tid:tid})
});
});

app.get('/acceptPartyRequest',function(req,res){
  console.log(chalk.blue("acceptPartyRequest get: inside function"));
  var requestUid=req.query.uid;//this is the uid of the guy who has sent the request.
  var uid=req.session.uid;
  var pid=req.query.pid;
  // "SELECT party.pid,party.Description,party.start,party.end,party.destination,party.isOver FROM visitor INNER JOIN party WHERE (visitor.uid=? AND visitor.visitorId=? AND visitor.pid=? AND visitor.pid=party.pid)"
  connection.query("SELECT * FROM party WHERE pid=?",[pid],function(err,results,fields){
    var today=new Date();
    var pid=results[0].pid;
    var destination=results[0].destination;
    uid=requestUid;
    var visitorId=req.session.uid;
    var dateOfJourney=(results[0].start).toString();
    var dateOfReturn=(results[0].end).toString();
    dateOfJourney=dateOfJourney.substring(0,10);
    dateOfReturn=dateOfReturn.substring(0,10);
    var description=results[0].Description;
    var pageName="accept party request";
  if(results[0].isOver==1)
  {
    //day has passed

    var displayOver="block;";
    var displayParty="none;";
  }
  else {
    var displayOver="none;";
    var displayParty="block;";
  }
  res.render("acceptPartyRequest",{page:pageName,displayOver:displayOver,displayParty:displayParty,destination:destination,description:description,dateOfJourney:dateOfJourney,dateOfReturn:dateOfReturn,uid:uid,visitorId:visitorId,pid:pid})
  });
});

app.get('/tourAccepted',function(req,res){
//here u get as query uid,comId and tid
//simply we update the database of companion here where we just uodate the column of isAccepted to 1
//also we make a tour for that person
console.log(chalk.blue("/tourAccepted get: inside function"));
var uid=req.query.uid;
var comId=req.query.comId;//this is the same as req.session.uid;
var tid=req.query.tid;
connection.query("UPDATE companion SET isAccepted=1 WHERE (uid=? AND comId=? AND tid=?)",[uid,comId,tid],function(err,results,fields){
  if(err)
  {
    console.log(chalk.red("/tourAccepted: could not update companion"+err.stack));
  }
  else {
    console.log(chalk.green("/tourAccepted: successsfully updated companion"));
  }
});

var pageName="tour Accepted";
res.render("tourAcceptedNotify",{page:pageName});
});

app.get('/partyAccepted',function(req,res){
  //here u get as query uid, visitorId and pid
  console.log(chalk.blue("/partyAccepted get: inside function"));
  var uid=req.query.uid;
  var visitorId=req.query.visitorId;
  var pid=req.query.pid;
  connection.query("UPDATE visitor SET isAccepted=1 WHERE (uid=? AND visitorId=? AND pid=?)",[uid,visitorId,pid],function(err,results,fields){
    if(err)
    {
      console.log(chalk.red("/partyAccepted: could not update visitor"+err.stack));
    }
    else {
      console.log(chalk.green("/partyAccepted: successsfully updated visitor"));
    }
  });
  var pageName="party Accepted";
  res.render('partyAcceptedNotify',{page:pageName});
});

app.get('/logout',function(req,res){
  if(req.session&&req.session.email)
  {
    console.log(chalk.blue("/logout GET:session was found with user:"+req.session.email));//DEBUG
    req.session.destroy(function(err){//used for destroying sessions...
      if(err){
        console.log(chalk.red("/logout GET:could not destroy the session"));//DEBUG
        res.render('landing');
      }
      else {
        console.log(chalk.green("/logout GET:session was destroyed"));//DEBUG
        res.render('landing');
      }
    });
  }
  else {
    console.log(chalk.red("/logout GET:session was not found"));//DEBUG
    res.render('landing');
  }
   ;
});



/*
Another important idea here is the use of sessions and how to store them effectively...
follow:https://expressjs.com/en/resources/middleware.html
*/
